@model ProjektZawody.Models.UserModel

@{
    ViewData["Title"] = "Logowanie";
    var theme = ViewData["Theme"] as string;
}
<!DOCTYPE html>
<html>
<head>
    <title>Theme Example</title>
    @if (theme == "dark")
    {
        <link rel="stylesheet" href="~/css/dark-theme.css" id="themeStylesheet">
    }
    else
    {
        <link rel="stylesheet" href="~/css/light-theme.css" id="themeStylesheet">
    }
</head>
<body>
    <h2>Logowanie</h2>
    <hr />
    <div class="row">
        <div class="col-md-4 login-form">
            <form asp-action="ProcessLogin">

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="UserName" class="control-label"></label>
                    <input asp-for="UserName" class="form-control" />
                    <span asp-validation-for="UserName" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Password" class="control-label"></label>
                    <input asp-for="Password" class="form-control" type="password" />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="Login" class="btn btn-primary" />
                </div>
                <a asp-action="SetTheme" asp-route-theme="light">Set Light Theme</a>
                <a asp-action="SetTheme" asp-route-theme="dark">Set Dark Theme</a>
            </form>
        </div>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }
</body>
</html>